[gd_resource type="VisualShader" load_steps=14 format=2]

[sub_resource type="VisualShaderNodeColorUniform" id=22]
uniform_name = "SlashColour"

[sub_resource type="OpenSimplexNoise" id=7]

[sub_resource type="NoiseTexture" id=8]
width = 657
height = 657
seamless = true
noise = SubResource( 7 )

[sub_resource type="VisualShaderNodeTexture" id=9]
texture = SubResource( 8 )

[sub_resource type="Gradient" id=10]
offsets = PoolRealArray( 0.175439, 1 )

[sub_resource type="GradientTexture" id=11]
gradient = SubResource( 10 )

[sub_resource type="VisualShaderNodeTexture" id=12]
texture = SubResource( 11 )

[sub_resource type="VisualShaderNodeColorOp" id=13]
output_port_for_preview = 0
operator = 4

[sub_resource type="VisualShaderNodeVectorFunc" id=14]
output_port_for_preview = 0
function = 25

[sub_resource type="VisualShaderNodeInput" id=15]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorOp" id=16]

[sub_resource type="VisualShaderNodeVec3Uniform" id=17]
uniform_name = "Offset"

[sub_resource type="VisualShaderNodeVectorOp" id=21]
operator = 2

[resource]
code = "shader_type spatial;
render_mode cull_disabled, specular_schlick_ggx;

uniform vec3 Offset;
uniform sampler2D tex_frg_2;
uniform sampler2D tex_frg_3;
uniform vec4 SlashColour : hint_color;



void vertex() {
// Output:0

}

void fragment() {
// Input:6
	vec3 n_out6p0 = vec3(UV, 0.0);

// VectorUniform:8
	vec3 n_out8p0 = Offset;

// VectorOp:7
	vec3 n_out7p0 = n_out6p0 + n_out8p0;

// Texture:2
	vec4 tex_frg_2_read = texture(tex_frg_2, n_out7p0.xy);
	vec3 n_out2p0 = tex_frg_2_read.rgb;
	float n_out2p1 = tex_frg_2_read.a;

// Texture:3
	vec4 tex_frg_3_read = texture(tex_frg_3, UV.xy);
	vec3 n_out3p0 = tex_frg_3_read.rgb;
	float n_out3p1 = tex_frg_3_read.a;

// ColorOp:4
	vec3 n_out4p0;
	{
		float base = n_out2p0.x;
		float blend = n_out3p0.x;
		if (base < 0.5) {
			n_out4p0.x = 2.0 * base * blend;
		} else {
			n_out4p0.x = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}
	{
		float base = n_out2p0.y;
		float blend = n_out3p0.y;
		if (base < 0.5) {
			n_out4p0.y = 2.0 * base * blend;
		} else {
			n_out4p0.y = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}
	{
		float base = n_out2p0.z;
		float blend = n_out3p0.z;
		if (base < 0.5) {
			n_out4p0.z = 2.0 * base * blend;
		} else {
			n_out4p0.z = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}

// ColorUniform:11
	vec3 n_out11p0 = SlashColour.rgb;
	float n_out11p1 = SlashColour.a;

// VectorOp:9
	vec3 n_out9p0 = n_out4p0 * n_out11p0;

// VectorFunc:5
	vec3 n_out5p0 = round(n_out4p0);

// Output:0
	ALBEDO = n_out9p0;
	ALPHA = dot(n_out5p0, vec3(0.333333, 0.333333, 0.333333));
	EMISSION = n_out9p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -261.668, 299.5 )
modes/cull = 2
nodes/fragment/0/position = Vector2( 800, 60 )
nodes/fragment/2/node = SubResource( 9 )
nodes/fragment/2/position = Vector2( -20, 100 )
nodes/fragment/3/node = SubResource( 12 )
nodes/fragment/3/position = Vector2( -20, 380 )
nodes/fragment/4/node = SubResource( 13 )
nodes/fragment/4/position = Vector2( 240, 340 )
nodes/fragment/5/node = SubResource( 14 )
nodes/fragment/5/position = Vector2( 480, 300 )
nodes/fragment/6/node = SubResource( 15 )
nodes/fragment/6/position = Vector2( -460, 300 )
nodes/fragment/7/node = SubResource( 16 )
nodes/fragment/7/position = Vector2( -260, 360 )
nodes/fragment/8/node = SubResource( 17 )
nodes/fragment/8/position = Vector2( -500, 460 )
nodes/fragment/9/node = SubResource( 21 )
nodes/fragment/9/position = Vector2( 480, 580 )
nodes/fragment/11/node = SubResource( 22 )
nodes/fragment/11/position = Vector2( 220, 620 )
nodes/fragment/connections = PoolIntArray( 2, 0, 4, 0, 3, 0, 4, 1, 4, 0, 5, 0, 5, 0, 0, 1, 6, 0, 7, 0, 8, 0, 7, 1, 7, 0, 2, 0, 4, 0, 9, 0, 9, 0, 0, 0, 9, 0, 0, 5, 11, 0, 9, 1 )
